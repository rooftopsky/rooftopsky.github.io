<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.19">

<!-- ********** -->
<!-- Double Click -->
<!-- id : doubleclick -->
<!-- ********** -->

  <plugin name="doubleclick" url.flash="%FIRSTXML%/graphics/doubleclick/fieldofview_dc.swf" url.html5="%FIRSTXML%/graphics/doubleclick/dctouch.min.js" keep="true" ondblclick="doubleclick_ondoubleclick();"/>
  <action name="doubleclick_ondoubleclick">switchFullscreen();


  </action>

<!-- ********** -->
<!-- Context menu -->
<!-- id : contextmenu -->
<!-- ********** -->
  <contextmenu fullscreen="false" versioninfo="false" touch="true">
    <item name="website1" onclick="getmessage(urltoopen,contextmenuwebsiteurl1);openurl(get(urltoopen),_blank);" />
    <item name="website2" onclick="getmessage(urltoopen,contextmenuwebsiteurl2);openurl(get(urltoopen),_blank);" />
    <item name="normal"        onclick="setViewNormal();
" separator="true"/>
    <item name="fisheye"       onclick="setViewFisheye();
"/>
    <item name="architectural" onclick="setViewArchitectural();
"/>
    <item name="stereographic" onclick="setViewStereographic();
"/>
    <item name="pannini"       onclick="setViewPannini();
"/>
    <item name="littleplanet"  onclick="setViewLittlePlanet();
"/>
    <item name="fisheyeball"   onclick="setViewFisheyeBall();
"/>
    <item name="fullscreenentry" onclick="enterFullscreen();
" separator="true"/>
  </contextmenu>

  <events name="contextmenuevents" keep="true" 
    onenterfullscreen="updateContextMenu" onexitfullscreen="updateContextMenu" 
    onxmlcomplete="updateContextMenu" 
    changetourlanguage="updateContextMenu" 
    />
  <events name="contextmenuvrevents" keep="true" 
    onvravailable="updateContextMenu();" onvrunavailable="updateContextMenu();"
    devices="html5"
    />
  <action name="updateContextMenu">
    getmessage(contextmenu.item[website1].caption, contextmenuopenwebsitelabel1);
    getmessage(contextmenu.item[website2].caption, contextmenuopenwebsitelabel2);
    getmessage(contextmenu.item[normal].caption, contextmenunormallabel);
    getmessage(contextmenu.item[architectural].caption, contextmenuarchitecturallabel);
    set(sceneisfull360, false);
    if(scene[get(xml.scene)].full360,
      sub(viewhfov, panoview.hmax, panoview.hmin);
      if (viewhfov == 360,
        sub(viewvfov, panoview.vmax, panoview.vmin);
        if (viewvfov == 180,
          set(sceneisfull360, true);
        );
      );
    );
    if (sceneisfull360 AND (device.webgl OR device.flash),
      set(contextmenu.item[fisheye].visible, true);
      getmessage(contextmenu.item[fisheye].caption, contextmenufisheyelabel);
      set(contextmenu.item[stereographic].visible, true);
      getmessage(contextmenu.item[stereographic].caption, contextmenustereographiclabel);
      set(contextmenu.item[pannini].visible, true);
      getmessage(contextmenu.item[pannini].caption, contextmenupanninilabel);
      set(contextmenu.item[littleplanet].visible, true);
      getmessage(contextmenu.item[littleplanet].caption, contextmenulittleplanetlabel);
      set(contextmenu.item[fisheyeball].visible, true);
      getmessage(contextmenu.item[fisheyeball].caption, contextmenufisheyeballlabel);
    ,
      set(contextmenu.item[fisheye].visible, false);
      set(contextmenu.item[stereographic].visible, false);
      set(contextmenu.item[pannini].visible, false);
      set(contextmenu.item[littleplanet].visible, false);
      set(contextmenu.item[fisheyeball].visible, false);
    );
    if (device.fullscreensupport,
      if(tour_fullscreen,
        getmessage(contextmenu.item[fullscreenentry].caption, contextmenucloseFsLabel);
        set(contextmenu.item[fullscreenentry].onclick, exitFullscreen();
);
       ,
        getmessage(contextmenu.item[fullscreenentry].caption, contextmenuopenFsLabel);
        set(contextmenu.item[fullscreenentry].onclick, enterFullscreen();
);
      );
     ,
      set(contextmenu.item[fullscreenentry].visible, false);
    );
  </action>

<!-- ********** -->
<!-- Progress Bar and Loopings -->
<!-- id : progressbar -->
<!-- ********** -->

  <progress showwait.flash="loopings(
				0xffffff,
				15,15,
				0,0,
				0xffffff,8,
				0,0,center
				)"
			showreloads.flash="false"
			parent=""
			/>


  <layer name="progressbar_bg"
    align="center"
    bgcolor="0x000000"
    bgalpha="1.0"
    bgborder="0"
    onclick="progressbar_stop();"
    enabled="true"
    handcursor="false"
    bgcapture="true"
    x="0" y="50"
    type="container"
    width="200" height="10"
    visible="true"
    keep="true">
      <layer name="progressbar_bar" 
        align="topleft"
        bgcolor="0xdddddd"
        bgalpha="1.0"
        x="0" y="0"
        type="container"
        width="0%"
        height="100%"
        enabled="false"
        bgshadow="0 0 2 0 0x000000 0.6 inset"
        keep="true"
        />
  </layer>
  <action name="progressbar_start">
    if(scene[get(xml.scene)].video,
      progressbar_stop();
    ,
      mul(progress_val, get(progress.progress), 100);
      txtadd(progress_percent, get(progress_val),"%");
      set(layer[progressbar_bar].width, get(progress_percent));
    if (device.html5, 
      mul(xcrop, layer[progressbarwheel].frame, 64);
      txtadd(layer[progressbarwheel].crop, get(xcrop), '|0|64|64');
      
      inc(layer[progressbarwheel].frame);
      if(layer[progressbarwheel].frame GE layer[progressbarwheel].frames, set(layer[progressbarwheel].frame,0));
    );
      delayedcall(progressbar_progresscall, 0.1,progressbar_start());
      if(progress_val == 100,
        progressbar_stop();
      );
    );
  </action>
  <action name="progressbar_stop">
    stopdelayedcall(progressbar_progresscall);
    set(layer[progressbar_bg].visible, false);
    set(layer[progressbar_bar].width, "0%");
    if (device.html5, set(layer[progressbarwheel].visible, false););
  </action>
  <events name="progressbar_events" onloadcomplete="progressbar_stop();" onxmlcomplete="if (device.html5,set(layer[progressbarwheel].visible, true););set(layer[progressbar_bg].visible, true);progressbar_start();" keep="true" />

  <!-- loading wheel -->
  <layer name="progressbarwheel"
         keep="true"
         devices="html5"
         visible="false"
         url="%FIRSTXML%/graphics/progressbarandloopings/loadingwheel.png"
         crop="0|0|64|64"
         align="center"
         x="0" y="0"
         frame="0" frames="12"
         width="30"
         height="30" />

<!-- ********** -->
<!-- Docked Thumbnails &amp; Control Bar -->
<!-- id : controlBar_dockedThumbnails -->
<!-- ********** -->

<krpano controlBar_dockedThumbnailsbarbuilt="false" controlBar_dockedThumbnailsIsOpened="false" controlBar_dockedThumbnailsThumbnailsPos="0" />

<events name="controlBar_dockedThumbnailsbarevents" 
	onxmlcomplete="controlBar_dockedThumbnailsbuildMenuBar();"


	onresize="controlBar_dockedThumbnailsOnResize();"
	keep="true"/>



<action name="controlBar_dockedThumbnailsbuildMenuBar">
	ifnot (controlBar_dockedThumbnailsbarbuilt, controlBar_dockedThumbnailsbuildMenu(); set(controlBar_dockedThumbnailsbarbuilt, true););
</action>


<!-- ********** -->
<!-- Thumbnails Bar part of -->
<!-- Docked Thumbnails &amp; Control Bar -->
<!-- id : controlBar_dockedThumbnails -->
<!-- ********** -->






<layer name="thumbnailsBar_controlBar_dockedThumbnails" 
	keep="true" 
	type="container" 
	visible="false"
	parent="controlBar_dockedThumbnails_bg" 
	align="bottomleft"
	
	width="100%"
	height="50" 
	
	x="0"
	y="0"
	zorder="1"
/>


<layer name="thumbnailBorderSource_controlBar_dockedThumbnails"
	keep="true"
	visible="false"
	onloaded="loadedImages_controlBar_dockedThumbnails(border);"
	url="%FIRSTXML%/graphics/dockedthumbscontrolbar/thumbnails_states.png" 
	offsetX="5"
	offsetY="5"
	quarterHeight="0"
/>


	
	<style name="scrollButtonsBgStyle_controlBar_dockedThumbnails"
		keep="true"
		parent="thumbnailsBar_controlBar_dockedThumbnails"
		alpha="0.3"
		zorder="1"
	/>
	<layer name="scrollPrevArrowBg_controlBar_dockedThumbnails" 
		style="scrollButtonsBgStyle_controlBar_dockedThumbnails" 
		url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_scroll_left_bg.png" 
		visible="false" 
			align="left" 
	/>
	<layer name="scrollNextArrowBg_controlBar_dockedThumbnails" 
		style="scrollButtonsBgStyle_controlBar_dockedThumbnails" 
		url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_scroll_right_bg.png" 
		visible="false" 
			align="right" 
	/>
	
	<krpano arrow1Loaded_controlBar_dockedThumbnails="false" arrow2Loaded_controlBar_dockedThumbnails="false" borderLoaded_controlBar_dockedThumbnails="false" thumbnailsLoadedCounter_controlBar_dockedThumbnails="0" thumbsCount_controlBar_dockedThumbnails="0" thumbsCounter_controlBar_dockedThumbnails="0" firstInit_controlBar_dockedThumbnails="false" />
	
	
	<events name="thumbnailsScrollEvents_controlBar_dockedThumbnails" 
		keep="true" 
		
		onxmlcomplete="ifnot(startResize_controlBar_dockedThumbnails,set(isLoaded_controlBar_dockedThumbnails, true);if(isStarted_controlBar_dockedThumbnails,onLoadCompleteHandler_controlBar_dockedThumbnails();););"
		onTourStart="set(isStarted_controlBar_dockedThumbnails, true);if(isLoaded_controlBar_dockedThumbnails,onLoadCompleteHandler_controlBar_dockedThumbnails(););"
		onnewpano="if(startResize_controlBar_dockedThumbnails,if(firstInit_controlBar_dockedThumbnails,onLoadCompleteHandler_controlBar_dockedThumbnails();););"
		onresize="onResizeHandler_controlBar_dockedThumbnails();"
		onenterfullscreen="delayedcall(0.2,scrollToCurrentThumb_controlBar_dockedThumbnails(););"
		onexitfullscreen="delayedcall(0.2,scrollToCurrentThumb_controlBar_dockedThumbnails(););"
	/>
	
	
	<layer name="scrollAreaContainer_controlBar_dockedThumbnails" 
		keep="true"
		type="container" 
		align="topleft"
		x="10"
		y="5"
		
		marginX="10"
		marginY="5"
		
		width="0" 
		height="0"
		
		targetWidth="0"
		targetHeight="0"
		
		scrollSpeedInit="10"
		scrollSpeed="10"
		scrollSpeedMax="70"
		scrollSpeedAcceleration="20"
		
		parent="thumbnailsBar_controlBar_dockedThumbnails"
		
		thumbWidth="0"
		thumbHeight="0"
		
		itemWidth="80"
		itemHeight="40"
		
		offsetX="0"
		offsetY="0"
		
		thumbSpacer="10"
		currentThumbsCount="0"
		
		adjustToContent="0"
		
		zorder="1"
		visible="false"
		ready="false"
	>
	
		
		<layer name="thumbsScrollArea_controlBar_dockedThumbnails" 
			url="%FIRSTXML%/graphics/scrollarea.swf" 
			alturl="%FIRSTXML%/graphics/scrollarea.js" 
			align="bottomleft"
			onhover_autoscrolling="false"
			
			x="0"
			y="0"
			 
				direction="h" 
		/>
	
	</layer>
	
	
	
	<layer name="scrollPrevArrow_controlBar_dockedThumbnails" 
		keep="true"
		type="image"
		visible="false"
		parent="thumbnailsBar_controlBar_dockedThumbnails"
		targetHeight="0"
		targetWidth="0"
		zorder="2"
		onloaded="loadedImages_controlBar_dockedThumbnails(arrow1);"
			url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_scroll_left.png"
			align="left"
	/>
	
	
	
	<layer name="scrollNextArrow_controlBar_dockedThumbnails" 
		keep="true"
		type="image"
		visible="false"
		parent="thumbnailsBar_controlBar_dockedThumbnails"
		targetHeight="0"
		targetWidth="0"
		zorder="2"
		onloaded="loadedImages_controlBar_dockedThumbnails(arrow2);"
			url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_scroll_right.png"
			align="right"
	/>
	
	<action name="loadedImages_controlBar_dockedThumbnails">
		if(%1 == "arrow1",
			set(arrow1Loaded_controlBar_dockedThumbnails, true);
		);
		if(%1 == "arrow2",
			set(arrow2Loaded_controlBar_dockedThumbnails, true);
		);
		if(%1 == "border",
			if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
				set(borderLoaded_controlBar_dockedThumbnails, true);
			);
		);
		if(%1 == "thumbnail",
			inc(thumbnailsLoadedCounter_controlBar_dockedThumbnails);
		);
	</action>
	
	<action name="onLoadCompleteHandler_controlBar_dockedThumbnails">
		
		set(thumbsCount_controlBar_dockedThumbnails, 0);
		
		
		set(thumbsCount_controlBar_dockedThumbnails, get(scene.count));
		
		
		
		
		
		
		
		loadThumbs_controlBar_dockedThumbnails();
		
		if(firstInit_controlBar_dockedThumbnails,
			onLoadCompleteHandlerPartThree_controlBar_dockedThumbnails();
		,
			onLoadCompleteHandlerPartTwo_controlBar_dockedThumbnails();
		);
	</action>
	
	<action name="onLoadCompleteHandlerPartTwo_controlBar_dockedThumbnails">
		set(imgCounter_controlBar_dockedThumbnails, 3);
		
		if(arrow1Loaded_controlBar_dockedThumbnails,
			dec(imgCounter_controlBar_dockedThumbnails);
		);
		if(arrow2Loaded_controlBar_dockedThumbnails,
			dec(imgCounter_controlBar_dockedThumbnails);
		);
		if(thumbsCount_controlBar_dockedThumbnails == thumbnailsLoadedCounter_controlBar_dockedThumbnails,
			dec(imgCounter_controlBar_dockedThumbnails);
		);
		
		if(imgCounter_controlBar_dockedThumbnails LE 0,
			stopdelayedcall(delayedCallOnLoadComplete_controlBar_dockedThumbnails);
			onLoadCompleteHandlerPartThree_controlBar_dockedThumbnails();
		,
			delayedcall(delayedCallOnLoadComplete_controlBar_dockedThumbnails, 0.2, onLoadCompleteHandlerPartTwo_controlBar_dockedThumbnails());
		);
	</action>
	
	<action name="onLoadCompleteHandlerPartThree_controlBar_dockedThumbnails">
		resetMouseBehavior_controlBar_dockedThumbnails();
		highlightCurrentThumb_controlBar_dockedThumbnails();
		
		
		if(layer[scrollAreaContainer_controlBar_dockedThumbnails].adjustToContent,
			mul(adjustWidth_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].marginX), 2);
			add(adjustWidth_controlBar_dockedThumbnails, get(layer[thumbsScrollArea_controlBar_dockedThumbnails].width));
			mul(adjustHeight_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].marginY), 2);
			add(adjustHeight_controlBar_dockedThumbnails, get(layer[thumbsScrollArea_controlBar_dockedThumbnails].height));
			
			
			if(adjustWidth_controlBar_dockedThumbnails GT stagewidth,
				set(adjustWidth_controlBar_dockedThumbnails, get(stagewidth));
				set(layer[scrollAreaContainer_controlBar_dockedThumbnails].adjustToContent, false);
			,
				if(adjustHeight_controlBar_dockedThumbnails GT stageheight,
					set(adjustHeight_controlBar_dockedThumbnails, get(stageheight));
					set(layer[scrollAreaContainer_controlBar_dockedThumbnails].adjustToContent, false);
				);
			);
			
			setSize_controlBar_dockedThumbnails(get(adjustWidth_controlBar_dockedThumbnails), get(adjustHeight_controlBar_dockedThumbnails));
		);
		
			initArrows_controlBar_dockedThumbnails();
		setupArrows_controlBar_dockedThumbnails(true);
		
		
		if (thumbsCounter_controlBar_dockedThumbnails LE 0,
			set(layer[thumbnailsBar_controlBar_dockedThumbnails].visible, false);
		);
		
		
		set(startResize_controlBar_dockedThumbnails, true);
		set(firstInit_controlBar_dockedThumbnails, true);
	</action>
	
	
	<action name="onResizeHandler_controlBar_dockedThumbnails">
		
		delayedcall(0.1, onResizeCallback_controlBar_dockedThumbnails(false); );
	</action>
	
	
	<action name="onResizeCallback_controlBar_dockedThumbnails">
		if(startResize_controlBar_dockedThumbnails,
			setSize_controlBar_dockedThumbnails(get(layer[scrollAreaContainer_controlBar_dockedThumbnails].targetWidth), get(layer[scrollAreaContainer_controlBar_dockedThumbnails].targetHeight));
			setupArrows_controlBar_dockedThumbnails(%1);
			
			
			if (thumbsCounter_controlBar_dockedThumbnails LE 0,
				set(layer[thumbnailsBar_controlBar_dockedThumbnails].visible, false);
			);
		);
	</action>
	
	
	
	
	
	
	<action name="thumbnailBorderDrawInit_controlBar_dockedThumbnails">
		
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetX, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderWidth));
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetY, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderWidth));
		
		
		mul(totalOffsetX_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderWidth), 2);
		mul(totalOffsetY_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderWidth), 2);
		
		
		if(startResize_controlBar_dockedThumbnails,
			sub(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth, get(totalOffsetX_controlBar_dockedThumbnails));
			sub(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight, get(totalOffsetY_controlBar_dockedThumbnails));
		);
		
		
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbWidth, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth));
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbHeight, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight));
		
		add(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth, get(totalOffsetX_controlBar_dockedThumbnails));
		add(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight, get(totalOffsetY_controlBar_dockedThumbnails));
	</action>
		
	
	<action name="thumbnailBorderImageInit_controlBar_dockedThumbnails">
		
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetX, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].offsetX));
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetY, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].offsetY));
		
		
		mul(totalOffsetX_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].offsetX), 2);
		mul(totalOffsetY_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].offsetY), 2);
		
		
		if(startResize_controlBar_dockedThumbnails,
			sub(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth, get(totalOffsetX_controlBar_dockedThumbnails));
			sub(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight, get(totalOffsetY_controlBar_dockedThumbnails));
		);
		
		
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbWidth, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth));
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbHeight, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight));
		
		add(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth, get(totalOffsetX_controlBar_dockedThumbnails));
		add(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight, get(totalOffsetY_controlBar_dockedThumbnails));
		
		
		div(layer[thumbnailBorderSource_controlBar_dockedThumbnails].quarterHeight, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].height), 4);
		
		
		set(cropX_controlBar_dockedThumbnails, 0);
		set(cropY_controlBar_dockedThumbnails, 0);
		set(cropW_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].width));
		set(cropH_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].quarterHeight));
		txtadd(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropDefault, get(cropX_controlBar_dockedThumbnails), '|', get(cropY_controlBar_dockedThumbnails), '|', get(cropW_controlBar_dockedThumbnails), '|', get(cropH_controlBar_dockedThumbnails));

		
		add(cropY_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].quarterHeight));
		txtadd(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropHover, get(cropX_controlBar_dockedThumbnails), '|', get(cropY_controlBar_dockedThumbnails), '|', get(cropW_controlBar_dockedThumbnails), '|', get(cropH_controlBar_dockedThumbnails));
		
		
		add(cropY_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].quarterHeight));
		txtadd(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropSelected, get(cropX_controlBar_dockedThumbnails), '|', get(cropY_controlBar_dockedThumbnails), '|', get(cropW_controlBar_dockedThumbnails), '|', get(cropH_controlBar_dockedThumbnails));
		
		
		add(cropY_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].quarterHeight));
		txtadd(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropVisited, get(cropX_controlBar_dockedThumbnails), '|', get(cropY_controlBar_dockedThumbnails), '|', get(cropW_controlBar_dockedThumbnails), '|', get(cropH_controlBar_dockedThumbnails));
		
		
		set(scaleX_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].offsetX));
		set(scaleY_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].offsetY));
		sub(scaleW_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].width), get(totalOffsetX_controlBar_dockedThumbnails));
		sub(scaleH_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].quarterHeight), get(totalOffsetY_controlBar_dockedThumbnails));
		txtadd(layer[thumbnailBorderSource_controlBar_dockedThumbnails].scale9grid, get(scaleX_controlBar_dockedThumbnails), '|', get(scaleY_controlBar_dockedThumbnails), '|', get(scaleW_controlBar_dockedThumbnails), '|', get(scaleH_controlBar_dockedThumbnails));
	</action>
	
	
	<action name="loadThumbs_controlBar_dockedThumbnails">
		if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
			set(imgCounter_controlBar_dockedThumbnails, 1);
		,
			set(imgCounter_controlBar_dockedThumbnails, 0);
		);
		
		if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
			if(borderLoaded_controlBar_dockedThumbnails,
				dec(imgCounter_controlBar_dockedThumbnails);
			);
		);
		
		if(imgCounter_controlBar_dockedThumbnails LE 0,
			stopdelayedcall(delayedCallOnLoadCompleteBorder_controlBar_dockedThumbnails);
			loadThumbsPartTwo_controlBar_dockedThumbnails();
		,
			delayedcall(delayedCallOnLoadCompleteBorder_controlBar_dockedThumbnails, 0.2, loadThumbs_controlBar_dockedThumbnails());
		);
	</action>
	
	<action name="loadThumbsPartTwo_controlBar_dockedThumbnails">
		ifnot(layer[scrollAreaContainer_controlBar_dockedThumbnails].ready,
			
			
			if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
				thumbnailBorderImageInit_controlBar_dockedThumbnails();
			,
				thumbnailBorderDrawInit_controlBar_dockedThumbnails();
			);
			
			
			set(thumbsCounter_controlBar_dockedThumbnails, 0);
			
			
				for( set(i_controlBar_dockedThumbnails, 0), i_controlBar_dockedThumbnails LT scene.count, inc(i_controlBar_dockedThumbnails),
					createThumb_controlBar_dockedThumbnails(get(scene[get(i_controlBar_dockedThumbnails)].name), get(scene[get(i_controlBar_dockedThumbnails)].thumburl), get(i_controlBar_dockedThumbnails), get(scene[get(i_controlBar_dockedThumbnails)].titleid));
					inc(thumbsCounter_controlBar_dockedThumbnails);
				);
			
			
			
			
			
			
			set(layer[scrollAreaContainer_controlBar_dockedThumbnails].currentThumbsCount, get(thumbsCounter_controlBar_dockedThumbnails));
			
			
			setSize_controlBar_dockedThumbnails(get(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].width), get(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].height));
			
			
			set(layer[scrollAreaContainer_controlBar_dockedThumbnails].visible, true);
			
			
					set(layer[thumbnailsBar_controlBar_dockedThumbnails].visible, true);
			
			
			set(layer[scrollAreaContainer_controlBar_dockedThumbnails].ready, true);
		);
	</action>
	
	
	<action name="setSize_controlBar_dockedThumbnails">
		
		
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].targetWidth, %1);
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].targetHeight, %2);
		
		
		set(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].width, %1);
		set(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].height, %2);
		layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].updatepos();
		
		
		mul(totalMarginX_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].marginX), 2);
		mul(totalMarginY_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].marginY), 2);
		
			add(totalPluginHeight_controlBar_dockedThumbnails, get(totalMarginY_controlBar_dockedThumbnails), get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight));
			
			
			
			if(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].pixelheight LT totalPluginHeight_controlBar_dockedThumbnails,
				set(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].height, get(totalPluginHeight_controlBar_dockedThumbnails));
			);
		
		layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].updatepos();
		
		
		sub(containerWidth_controlBar_dockedThumbnails, get(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].pixelwidth), get(totalMarginX_controlBar_dockedThumbnails));
		sub(containerHeight_controlBar_dockedThumbnails, get(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].pixelheight), get(totalMarginY_controlBar_dockedThumbnails));

		
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].width, get(containerWidth_controlBar_dockedThumbnails));
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].height, get(containerHeight_controlBar_dockedThumbnails));
		
		set(scrollAreaSize_controlBar_dockedThumbnails, 0);
		
		
		mul(totalThumbsSpacer_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].currentThumbsCount), get(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbSpacer));
		sub(totalThumbsSpacer_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbSpacer));
		
		set(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].visible, true);
		

			mul(scrollAreaSize_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth), get(layer[scrollAreaContainer_controlBar_dockedThumbnails].currentThumbsCount));
			add(scrollAreaSize_controlBar_dockedThumbnails, get(totalThumbsSpacer_controlBar_dockedThumbnails));
			
			set(layer[thumbsScrollArea_controlBar_dockedThumbnails].width, get(scrollAreaSize_controlBar_dockedThumbnails));
			set(layer[thumbsScrollArea_controlBar_dockedThumbnails].height, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight));
			
			
			if(layer[scrollAreaContainer_controlBar_dockedThumbnails].width LT layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth,
				set(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].visible, false);
			,
				verifyThumbnailsBarVisibility_controlBar_dockedThumbnails();
			);
			
		
		
		if(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].width LT 0,
			set(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].visible, false);
		);
		
	</action>
	
	
	<action name="verifyThumbnailsBarVisibility_controlBar_dockedThumbnails">
		if(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].visible,
			set(boolValue_controlBar_dockedThumbnails, false);
			
					set(boolValue_controlBar_dockedThumbnails, true);
			
			set(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].visible, get(boolValue_controlBar_dockedThumbnails));
		);
	</action>
	
	
	<action name="createThumb_controlBar_dockedThumbnails">

			add(offsetFactor_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth), get(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbSpacer));
	
			mul(thumbIncPos_controlBar_dockedThumbnails, %3, get(offsetFactor_controlBar_dockedThumbnails));
			
			
			if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
				add(thumbIncPos_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetX));
			);
			
		
		mul(negativeOffsetX_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetX), -1);
		mul(negativeOffsetY_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetY), -1);
		
		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '_controlBar_dockedThumbnails');
		addlayer(get(thumbName));
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_controlBar_dockedThumbnails');
		addlayer(get(thumbBorderName));
		
		
		ifnot(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
			set(layer[get(thumbBorderName)].type, container);
			set(layer[get(thumbBorderName)].parent, thumbsScrollArea_controlBar_dockedThumbnails);
		);
		
		
		set(layer[get(thumbName)].onloaded, loadedImages_controlBar_dockedThumbnails("thumbnail"););
		set(layer[get(thumbName)].url, %2);
		set(layer[get(thumbName)].keep, true);
		set(layer[get(thumbName)].width, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbWidth));
		set(layer[get(thumbName)].height, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbHeight));
		set(layer[get(thumbName)].align, topleft);
		
		
			set(layer[get(thumbName)].y, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetY));
		
			if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
				set(layer[get(thumbName)].parent, thumbsScrollArea_controlBar_dockedThumbnails);
				set(layer[get(thumbName)].x, get(thumbIncPos_controlBar_dockedThumbnails));
			,
				set(layer[get(thumbName)].parent, get(thumbBorderName));
				set(layer[get(thumbName)].x, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetX));
				set(layer[get(thumbName)].onclick, resetMouseBehavior_controlBar_dockedThumbnails(); mainloadscene(%1); delayedcall(0.1,highlightThumb_controlBar_dockedThumbnails(%1)));
			);	
			
		
		
		set(layer[get(thumbBorderName)].keep, true);
		set(layer[get(thumbBorderName)].width, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth));
		set(layer[get(thumbBorderName)].height, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight));
		set(layer[get(thumbBorderName)].align, topleft);
		
		if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
			set(layer[get(thumbBorderName)].url, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url));
			set(layer[get(thumbBorderName)].scale9grid, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].scale9grid));
			set(layer[get(thumbBorderName)].parent, get(thumbName));
			set(layer[get(thumbBorderName)].x, get(negativeOffsetX_controlBar_dockedThumbnails));
			set(layer[get(thumbBorderName)].y, get(negativeOffsetY_controlBar_dockedThumbnails));
			set(layer[get(thumbBorderName)].onclick, resetMouseBehavior_controlBar_dockedThumbnails(); mainloadscene(%1); delayedcall(0.1,highlightThumb_controlBar_dockedThumbnails(%1)));
		,
			
				set(layer[get(thumbBorderName)].x, get(thumbIncPos_controlBar_dockedThumbnails)); 
				
		);
		
		
		setupMouseBehavior_controlBar_dockedThumbnails(%1, %4);
		
	</action>
	
	
	<action name="removeThumb_controlBar_dockedThumbnails">
		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '_controlBar_dockedThumbnails');
		removelayer(get(thumbName));
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_controlBar_dockedThumbnails');
		removelayer(get(thumbBorderName));
	</action>
	
	
	<action name="initArrows_controlBar_dockedThumbnails">
		ifnot(device.touchdevice,
			
			if(layer[scrollPrevArrow_controlBar_dockedThumbnails].targetHeight LE 0,
				set(layer[scrollPrevArrow_controlBar_dockedThumbnails].targetHeight, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].height));
				set(layer[scrollPrevArrow_controlBar_dockedThumbnails].targetWidth, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].width));
			);
			if(layer[scrollNextArrow_controlBar_dockedThumbnails].targetHeight LE 0,
				set(layer[scrollNextArrow_controlBar_dockedThumbnails].targetHeight, get(layer[scrollNextArrow_controlBar_dockedThumbnails].height));
				set(layer[scrollNextArrow_controlBar_dockedThumbnails].targetWidth, get(layer[scrollNextArrow_controlBar_dockedThumbnails].width));
			);
			
			
			set(layer[scrollPrevArrow_controlBar_dockedThumbnails].width, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].targetWidth));
			set(layer[scrollNextArrow_controlBar_dockedThumbnails].width, get(layer[scrollNextArrow_controlBar_dockedThumbnails].targetWidth));
			
				set(layer[scrollPrevArrowBg_controlBar_dockedThumbnails].width, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].targetWidth));
				set(layer[scrollNextArrowBg_controlBar_dockedThumbnails].width, get(layer[scrollNextArrow_controlBar_dockedThumbnails].targetWidth));
			
			div(btPrevQuarterHeight_controlBar_dockedThumbnails, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].targetHeight), 3);
			div(btNextQuarterHeight_controlBar_dockedThumbnails, get(layer[scrollNextArrow_controlBar_dockedThumbnails].targetHeight), 3);
			
			set(cropBtPrevX_controlBar_dockedThumbnails, 0);
			set(cropBtPrevY_controlBar_dockedThumbnails, 0);
			set(cropBtPrevW_controlBar_dockedThumbnails, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].width));
			set(cropBtPrevH_controlBar_dockedThumbnails, get(btPrevQuarterHeight_controlBar_dockedThumbnails));
			
			txtadd(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropDefault, get(cropBtPrevX_controlBar_dockedThumbnails), '|', get(cropBtPrevY_controlBar_dockedThumbnails), '|', get(cropBtPrevW_controlBar_dockedThumbnails), '|', get(cropBtPrevH_controlBar_dockedThumbnails));
			add(cropBtPrevY_controlBar_dockedThumbnails, get(btPrevQuarterHeight_controlBar_dockedThumbnails));
			txtadd(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropOver, get(cropBtPrevX_controlBar_dockedThumbnails), '|', get(cropBtPrevY_controlBar_dockedThumbnails), '|', get(cropBtPrevW_controlBar_dockedThumbnails), '|', get(cropBtPrevH_controlBar_dockedThumbnails));
			add(cropBtPrevY_controlBar_dockedThumbnails, get(btPrevQuarterHeight_controlBar_dockedThumbnails));
			txtadd(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropDown, get(cropBtPrevX_controlBar_dockedThumbnails), '|', get(cropBtPrevY_controlBar_dockedThumbnails), '|', get(cropBtPrevW_controlBar_dockedThumbnails), '|', get(cropBtPrevH_controlBar_dockedThumbnails));
			
			set(cropBtNextX_controlBar_dockedThumbnails, 0);
			set(cropBtNextY_controlBar_dockedThumbnails, 0);
			set(cropBtNextW_controlBar_dockedThumbnails, get(layer[scrollNextArrow_controlBar_dockedThumbnails].width));
			set(cropBtNextH_controlBar_dockedThumbnails, get(btNextQuarterHeight_controlBar_dockedThumbnails));
			
			txtadd(layer[scrollNextArrow_controlBar_dockedThumbnails].cropDefault, get(cropBtNextX_controlBar_dockedThumbnails), '|', get(cropBtNextY_controlBar_dockedThumbnails), '|', get(cropBtNextW_controlBar_dockedThumbnails), '|', get(cropBtNextH_controlBar_dockedThumbnails));
			add(cropBtNextY_controlBar_dockedThumbnails, get(btNextQuarterHeight_controlBar_dockedThumbnails));
			txtadd(layer[scrollNextArrow_controlBar_dockedThumbnails].cropOver, get(cropBtNextX_controlBar_dockedThumbnails), '|', get(cropBtNextY_controlBar_dockedThumbnails), '|', get(cropBtNextW_controlBar_dockedThumbnails), '|', get(cropBtNextH_controlBar_dockedThumbnails));
			add(cropBtNextY_controlBar_dockedThumbnails, get(btNextQuarterHeight_controlBar_dockedThumbnails));
			txtadd(layer[scrollNextArrow_controlBar_dockedThumbnails].cropDown, get(cropBtNextX_controlBar_dockedThumbnails), '|', get(cropBtNextY_controlBar_dockedThumbnails), '|', get(cropBtNextW_controlBar_dockedThumbnails), '|', get(cropBtNextH_controlBar_dockedThumbnails));
		);
	</action>
	
	<action name="setupArrows_controlBar_dockedThumbnails">
		
		if(layer[scrollAreaContainer_controlBar_dockedThumbnails].adjustToContent,
			hideArrows_controlBar_dockedThumbnails();
		,
			ifnot(device.touchdevice,
				
					if(layer[scrollAreaContainer_controlBar_dockedThumbnails].width LT layer[thumbsScrollArea_controlBar_dockedThumbnails].width,
				
					showArrows_controlBar_dockedThumbnails();
				,
					hideArrows_controlBar_dockedThumbnails();
				);
			,
				hideArrows_controlBar_dockedThumbnails();
			);
		);
		
		
		if(%1,
			scrollToCurrentThumb_controlBar_dockedThumbnails();
		);
		
		
			
			if(layer[scrollAreaContainer_controlBar_dockedThumbnails].width LT layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth,
				set(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].visible, false);
			);
	</action>
	
	
	<action name="showArrows_controlBar_dockedThumbnails">
		
		
			set(layer[scrollPrevArrow_controlBar_dockedThumbnails].crop, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropDefault));
			set(layer[scrollPrevArrow_controlBar_dockedThumbnails].onovercrop, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropOver));
			set(layer[scrollPrevArrow_controlBar_dockedThumbnails].ondowncrop, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropDown));
			
			set(layer[scrollNextArrow_controlBar_dockedThumbnails].crop, get(layer[scrollNextArrow_controlBar_dockedThumbnails].cropDefault));
			set(layer[scrollNextArrow_controlBar_dockedThumbnails].onovercrop, get(layer[scrollNextArrow_controlBar_dockedThumbnails].cropOver));
			set(layer[scrollNextArrow_controlBar_dockedThumbnails].ondowncrop, get(layer[scrollNextArrow_controlBar_dockedThumbnails].cropDown));
			
				set(layer[scrollPrevArrow_controlBar_dockedThumbnails].height, 36);
				set(layer[scrollPrevArrow_controlBar_dockedThumbnails].width, 36);
				
				set(layer[scrollNextArrow_controlBar_dockedThumbnails].height, 36);
				set(layer[scrollNextArrow_controlBar_dockedThumbnails].width, 36);
			
					set(layer[scrollPrevArrowBg_controlBar_dockedThumbnails].height, 36);
					set(layer[scrollPrevArrowBg_controlBar_dockedThumbnails].width, 36);
					
					set(layer[scrollNextArrowBg_controlBar_dockedThumbnails].height, 36);
					set(layer[scrollNextArrowBg_controlBar_dockedThumbnails].width, 36);
				set(layer[scrollPrevArrowBg_controlBar_dockedThumbnails].crop, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropDefault));
				set(layer[scrollNextArrowBg_controlBar_dockedThumbnails].crop, get(layer[scrollNextArrow_controlBar_dockedThumbnails].cropDefault));
			
		
		
		set(layer[scrollPrevArrow_controlBar_dockedThumbnails].visible, true);
		set(layer[scrollNextArrow_controlBar_dockedThumbnails].visible, true);
		
			set(layer[scrollPrevArrowBg_controlBar_dockedThumbnails].visible, true);
			set(layer[scrollNextArrowBg_controlBar_dockedThumbnails].visible, true);
		
		
			
			add(totalArrowSize_controlBar_dockedThumbnails, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].width), get(layer[scrollNextArrow_controlBar_dockedThumbnails].width));
		
			
			sub(scrollAreaContainerSize_controlBar_dockedThumbnails, get(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].pixelwidth), get(totalArrowSize_controlBar_dockedThumbnails));
		
			set(layer[scrollAreaContainer_controlBar_dockedThumbnails].width, get(scrollAreaContainerSize_controlBar_dockedThumbnails));
			
			set(layer[scrollAreaContainer_controlBar_dockedThumbnails].x, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].width));
			
		
		
		set(layer[scrollPrevArrow_controlBar_dockedThumbnails].onhover, scrollPrev_controlBar_dockedThumbnails();changeArrowsBgCrop_controlBar_dockedThumbnails('prev','over'););
		set(layer[scrollNextArrow_controlBar_dockedThumbnails].onhover, scrollNext_controlBar_dockedThumbnails();changeArrowsBgCrop_controlBar_dockedThumbnails('next','over'););
		
		set(layer[scrollPrevArrow_controlBar_dockedThumbnails].onclick, scrollPrev_controlBar_dockedThumbnails(get(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeedAcceleration)););
		set(layer[scrollNextArrow_controlBar_dockedThumbnails].onclick, scrollNext_controlBar_dockedThumbnails(get(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeedAcceleration)););
		
		
		
		
		
		set(layer[scrollPrevArrow_controlBar_dockedThumbnails].onout, set(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeedInit));changeArrowsBgCrop_controlBar_dockedThumbnails('prev','out'););
		set(layer[scrollNextArrow_controlBar_dockedThumbnails].onout, set(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeedInit));changeArrowsBgCrop_controlBar_dockedThumbnails('next','out'););
		
	</action>
	
	
	<action name="changeArrowsBgCrop_controlBar_dockedThumbnails">
		if(%1 == "prev",
			if(%2 == "over",
				set(layer[scrollPrevArrowBg_controlBar_dockedThumbnails].crop, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropOver));
			,
				set(layer[scrollPrevArrowBg_controlBar_dockedThumbnails].crop, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropDefault));
			);
		,
			if(%2 == "over",
				set(layer[scrollNextArrowBg_controlBar_dockedThumbnails].crop, get(layer[scrollNextArrow_controlBar_dockedThumbnails].cropOver));
			,
				set(layer[scrollNextArrowBg_controlBar_dockedThumbnails].crop, get(layer[scrollNextArrow_controlBar_dockedThumbnails].cropDefault));
			);
		);
	</action>
	
	
	<action name="hideArrows_controlBar_dockedThumbnails">
		
		set(layer[scrollPrevArrow_controlBar_dockedThumbnails].visible, false);
		set(layer[scrollNextArrow_controlBar_dockedThumbnails].visible, false);
		
			set(layer[scrollPrevArrowBg_controlBar_dockedThumbnails].visible, false);
			set(layer[scrollNextArrowBg_controlBar_dockedThumbnails].visible, false);
		

			mul(totalMargin_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].marginX), 2);
			
			sub(scrollAreaContainerSize_controlBar_dockedThumbnails, get(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].pixelwidth), get(totalMargin_controlBar_dockedThumbnails));

			set(layer[scrollAreaContainer_controlBar_dockedThumbnails].width, get(scrollAreaContainerSize_controlBar_dockedThumbnails));
			set(layer[scrollAreaContainer_controlBar_dockedThumbnails].x, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].marginX));
			 
			
	</action>
	
	
	<action name="scrollPrev_controlBar_dockedThumbnails">
		
		
		if(%1,
			inc(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed, %1);
		);
		
		layer[thumbsScrollArea_controlBar_dockedThumbnails].stopscrolling();
		
		set(scrollLimit_controlBar_dockedThumbnails, 0);
		
		
			
			
			add(layer[thumbsScrollArea_controlBar_dockedThumbnails].x, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed));
			if(layer[thumbsScrollArea_controlBar_dockedThumbnails].x GE scrollLimit_controlBar_dockedThumbnails,
				set(layer[thumbsScrollArea_controlBar_dockedThumbnails].x, get(scrollLimit_controlBar_dockedThumbnails));
			);
		
		if(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed LT layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeedMax,
			inc(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed);
		);
		
	</action>
	
	
	<action name="scrollNext_controlBar_dockedThumbnails">
		
		
		if(%1,
			inc(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed, %1);
		);
		
		layer[thumbsScrollArea_controlBar_dockedThumbnails].stopscrolling();
		
			
			sub(scrollLimit_controlBar_dockedThumbnails, get(layer[thumbsScrollArea_controlBar_dockedThumbnails].width), get(layer[scrollAreaContainer_controlBar_dockedThumbnails].width));
			
			mul(scrollLimit_controlBar_dockedThumbnails, -1);
			
			sub(layer[thumbsScrollArea_controlBar_dockedThumbnails].x, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed));
			if(layer[thumbsScrollArea_controlBar_dockedThumbnails].x LE scrollLimit_controlBar_dockedThumbnails,
				set(layer[thumbsScrollArea_controlBar_dockedThumbnails].x, get(scrollLimit_controlBar_dockedThumbnails));
			);
		
		if(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed LT layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeedMax,
			inc(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed);
		);
		
	</action>
	
	
	<action name="resetMouseBehavior_controlBar_dockedThumbnails">
	
		
		
			for( set(j_controlBar_dockedThumbnails, 0), j_controlBar_dockedThumbnails LT scene.count, inc(j_controlBar_dockedThumbnails),
				set(thumbBorderName, 'thumbBorder_');
				txtadd(thumbBorderName, get(scene[get(j_controlBar_dockedThumbnails)].name));
				txtadd(thumbBorderName, '_controlBar_dockedThumbnails');
				
				setupMouseBehavior_controlBar_dockedThumbnails(get(scene[get(j_controlBar_dockedThumbnails)].name), get(scene[get(j_controlBar_dockedThumbnails)].titleid));
			);
		
	</action>
	
	
	<action name="setupMouseBehavior_controlBar_dockedThumbnails">

		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '_controlBar_dockedThumbnails');
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_controlBar_dockedThumbnails');
		
		if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
			set(layer[get(thumbBorderName)].crop, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropDefault));
			set(layer[get(thumbBorderName)].onovercrop, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropHover));
			set(layer[get(thumbBorderName)].ondowncrop, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropHover));
			set(layer[get(thumbBorderName)].tooltip, %2);
				set(layer[get(thumbBorderName)].onhover, showTooltip('plugin', controlBar_dockedThumbnailsmenuTooltipStyle));
				set(layer[get(thumbBorderName)].onout, hideTooltip());
		,
			set(layer[get(thumbBorderName)].bgcolor, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderColorDefault));
			set(layer[get(thumbBorderName)].bgalpha, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderAlphaDefault));
				set(layer[get(thumbName)].tooltip, %2);
				set(layer[get(thumbName)].onhover, showTooltip('plugin', controlBar_dockedThumbnailsmenuTooltipStyle));
			
			set(layer[get(thumbName)].onover, 
				set(layer[get(parent)].bgcolor, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderColorHover));
				set(layer[get(parent)].bgalpha, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderAlphaHover));
			);
			
			set(layer[get(thumbName)].onout, 
				set(layer[get(parent)].bgcolor, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderColorDefault));
				set(layer[get(parent)].bgalpha, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderAlphaDefault));
				hideTooltip();
			);
		);
	
	</action>
	
	
	<action name="highlightCurrentThumb_controlBar_dockedThumbnails">
			delayedcall(0.1,highlightThumb_controlBar_dockedThumbnails(get(xml.scene)));
	</action>
	
	
	<action name="highlightThumb_controlBar_dockedThumbnails">
	
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_controlBar_dockedThumbnails');
		
		if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
			set(layer[get(thumbBorderName)].crop, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropSelected));
			set(layer[get(thumbBorderName)].onovercrop, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropSelected));
			set(layer[get(thumbBorderName)].ondowncrop, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropSelected));
		,
			set(thumbName, 'thumb_');
			txtadd(thumbName, %1);
			txtadd(thumbName, '_controlBar_dockedThumbnails');
			
			set(layer[get(thumbBorderName)].bgcolor, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderColorSelected));
			set(layer[get(thumbBorderName)].bgalpha, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderAlphaSelected));
			
			set(layer[get(thumbName)].onover, "");
			set(layer[get(thumbName)].onout, hideTooltip(););
		);

		scrollToThumb_controlBar_dockedThumbnails(%1);
	</action>
	
	
	<action name="scrollToCurrentThumb_controlBar_dockedThumbnails">
			scrollToThumb_controlBar_dockedThumbnails(get(xml.scene));
	</action>
	
	
	<action name="scrollToThumb_controlBar_dockedThumbnails">
		
		set(thumbName, 'thumb_');
		set(thumbBorderName, 'thumbBorder_');
		
		txtadd(thumbName, %1);
		txtadd(thumbName, '_controlBar_dockedThumbnails');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_controlBar_dockedThumbnails');

			set(posX_controlBar_dockedThumbnails, 0);
			if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
				div(halfThumbWidth_controlBar_dockedThumbnails, get(layer[get(thumbName)].width), 2);
				ifnot(layer[scrollAreaContainer_controlBar_dockedThumbnails].adjustToContent,
					add(posX_controlBar_dockedThumbnails, get(layer[get(thumbName)].x), get(halfThumbWidth_controlBar_dockedThumbnails));
				);
				if(layer[thumbsScrollArea_controlBar_dockedThumbnails].scrolltocenter,
					layer[thumbsScrollArea_controlBar_dockedThumbnails].scrolltocenter(get(posX_controlBar_dockedThumbnails), 0);
				);
			,
				div(halfThumbWidth_controlBar_dockedThumbnails, get(layer[get(thumbBorderName)].width), 2);
				ifnot(layer[scrollAreaContainer_controlBar_dockedThumbnails].adjustToContent,
					add(posX_controlBar_dockedThumbnails, get(layer[get(thumbBorderName)].x), get(halfThumbWidth_controlBar_dockedThumbnails));
				);
				if(layer[thumbsScrollArea_controlBar_dockedThumbnails].scrolltocenter,
					layer[thumbsScrollArea_controlBar_dockedThumbnails].scrolltocenter(get(posX_controlBar_dockedThumbnails), 0);
				);
			);
		
	</action>
	


<action name="resetThumbnailsBarSize_controlBar_dockedThumbnails">
	
	
	set(sizeHeight, 40);
	mul(totalMarginY, 5, 2);
	if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
		mul(totalOffsetY, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].offsetY), 2);
	,
		mul(totalOffsetY, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderWidth), 2);
	);
	add(sizeHeight, totalMarginY);
	add(sizeHeight, totalOffsetY);
	
	setSize_controlBar_dockedThumbnails(%1, sizeHeight);
</action>





<action name="controlBar_dockedThumbnailsbuildMenu">
	
    set(controlBar_dockedThumbnailsbutton_pos, 0);
    set(layer[controlBar_dockedThumbnailsbtn_hidecontrols].x, get(controlBar_dockedThumbnailsbutton_pos));
    set(layer[controlBar_dockedThumbnailsbtn_hidecontrols_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
    inc(controlBar_dockedThumbnailsbutton_pos, 36);


      if (device.fullscreensupport,
        set(layer[controlBar_dockedThumbnailsbtn_openfs].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_closefs].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_openfs_bg ].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_closefs_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );


      set(layer[controlBar_dockedThumbnailsbtn_share].x   , get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_share_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
      inc(controlBar_dockedThumbnailsbutton_pos, 36);


      set(layer[controlBar_dockedThumbnailsbtn_autorotate_on].x , get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_autorotate_on_bg].x , get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_autorotate_off].x, get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_autorotate_off_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
      inc(controlBar_dockedThumbnailsbutton_pos, 36);


      set(layer[controlBar_dockedThumbnailsbtn_autotour_on].x , get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_autotour_on_bg].x , get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_autotour_off].x, get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_autotour_off_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
      inc(controlBar_dockedThumbnailsbutton_pos, 36);






      set(layer[controlBar_dockedThumbnailsbtn_home].x, get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_home_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
      inc(controlBar_dockedThumbnailsbutton_pos, 36);

      if (device.desktop,
        set(layer[controlBar_dockedThumbnailsbtn_right].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_right_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);

        set(layer[controlBar_dockedThumbnailsbtn_left].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_left_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );

      if (device.desktop,
        set(layer[controlBar_dockedThumbnailsbtn_down].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_down_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);

        set(layer[controlBar_dockedThumbnailsbtn_up].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_up_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );

      if (device.desktop,
        set(layer[controlBar_dockedThumbnailsbtn_out].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_out_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
        set(layer[controlBar_dockedThumbnailsbtn_in].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_in_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );


      if (scene.count GT 1,
        set(layer[controlBar_dockedThumbnailsbtn_next_pano].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_next_pano_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);

        set(layer[controlBar_dockedThumbnailsbtn_prev_pano].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_prev_pano_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );



      set(controlBar_dockedThumbnailsThumbnailsPos, get(controlBar_dockedThumbnailsbutton_pos));
      controlBar_dockedThumbnailsUpdateThumbnailsSize();
	
	
	
</action>

<events name="controlBar_dockedThumbnailsStartTourEvents" onTourStart="controlBar_dockedThumbnailsCallOnStartTour();" keep="true" />

<action name="controlBar_dockedThumbnailsCallOnStartTour">
	
	controlBar_dockedThumbnailsshowMenuControls();
</action>



	<action name="controlBar_dockedThumbnailsOnResize">
		controlBar_dockedThumbnailsUpdateThumbnailsSize();
	</action>
	<action name="controlBar_dockedThumbnailsUpdateThumbnailsSize">
		copy(newThumbnailsBarWidth, stagewidth);
		sub(newThumbnailsBarWidth, controlBar_dockedThumbnailsThumbnailsPos);
		
		resetThumbnailsBarSize_controlBar_dockedThumbnails(get(newThumbnailsBarWidth));
	</action>

    <layer name="controlBar_dockedThumbnails_bg"
           keep="true"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/footer.png"
           zorder="4"
           width="100%"
           align="bottomleft"
           x="0"
           visible="false" />

    <style name="controlBar_dockedThumbnails_btn_style_bg"
            keep="true"
            parent="controlBar_dockedThumbnails_bg"
            crop="0|0|48|48"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_bg.png"
            align="bottomright"
            height="36"
            width="36"
            alpha="0.3"
            y="12"
            zorder="0"
            />
    <style name="controlBar_dockedThumbnails_btn_style_bg_off"
            keep="true"
            parent="controlBar_dockedThumbnails_bg"
            crop="0|0|48|48"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_bg.png"
            align="bottomright"
            height="36"
            width="36"
            alpha="0.3"
            y="12"
            zorder="0"
            />

    <style name="controlBar_dockedThumbnails_btn_style_on_bg"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
           crop="0|48|48|48"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_bg.png"
           align="bottomright"
           height="36"
           width="36"
           alpha="0.3"
           y="12"
           zorder="0"
           />
    <style name="controlBar_dockedThumbnails_btn_style_on_bg_off"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
           crop="0|0|48|48"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_bg.png"
           align="bottomright"
           height="36"
           width="36"
           alpha="0.3"
           y="12"
           zorder="0"
           />

    <style name="controlBar_dockedThumbnails_btn_down_style"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
                 crop="0| 0|48|48"
           onovercrop="0|48|48|48"
           ondowncrop="0|96|48|48"
           align="bottomright"
           height="36"
           width="36"
           x="0" y="12"
           zorder="1"
           onhover="showTooltip('plugin',controlBar_dockedThumbnailsmenuTooltipStyle);"
           onover="controlBar_dockedThumbnailsctrl_btn_onoveraction"
           onout="controlBar_dockedThumbnailsctrl_btn_onoutaction"
           />

    <style name="controlBar_dockedThumbnails_btn_style"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
                 crop="0| 0|48|48"
           onovercrop="0|48|48|48"
           ondowncrop="0|96|48|48"
           align="bottomright"
           height="36"
           width="36"
           x="0" y="12"
           zorder="1"
           onhover="showTooltip('plugin',controlBar_dockedThumbnailsmenuTooltipStyle);"
           onover="controlBar_dockedThumbnailsctrl_btn_onoveraction"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction"
           onout="controlBar_dockedThumbnailsctrl_btn_onoutaction"
           />
    <style name="controlBar_dockedThumbnails_btn_style_off"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
           align="bottomright"
           height="36"
           width="36"
           x="0" y="12"
           zorder="1"
           onhover="showTooltip('plugin',controlBar_dockedThumbnailsmenuTooltipStyle);"
           onout="hideTooltip();"
           />

  <action name="controlBar_dockedThumbnailsctrl_btn_onoveraction">
    txtadd(btn_bg_name, get(name), "_bg");
    set(layer[get(btn_bg_name)].crop, "0|48|48|48");
  </action>

  <action name="controlBar_dockedThumbnailsctrl_btn_ondownaction">
    txtadd(btn_bg_name, get(name), "_bg");
    set(layer[get(btn_bg_name)].crop, "0|96|48|48");
  </action>

  <action name="controlBar_dockedThumbnailsctrl_btn_onoutaction">
    txtadd(btn_bg_name, get(name), "_bg");
    set(layer[get(btn_bg_name)].crop, "0|0|48|48");
    hideTooltip();
  </action>

    <style name="controlBar_dockedThumbnails_btn_style_on"
            keep="true"
            parent="controlBar_dockedThumbnails_bg"
                  crop="0|48|48|48"
            onovercrop="0|48|48|48"
            ondowncrop="0|96|48|48"
            align="bottomright"
            height="36"
            width="36"
            y="12"
            zorder="1"
            onhover="showTooltip('plugin',controlBar_dockedThumbnailsmenuTooltipStyle);" 
            onout="hideTooltip();"
            />
    <style name="controlBar_dockedThumbnails_btn_style_on_off"
            keep="true"
            parent="controlBar_dockedThumbnails_bg"
            align="bottomright"
            height="36"
            width="36"
            y="12"
            zorder="1"
            onhover="showTooltip('plugin',controlBar_dockedThumbnailsmenuTooltipStyle);" 
            onout="hideTooltip();"
            />



    <layer name="controlBar_dockedThumbnailsbtn_in_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" devices="desktop"/>
    <layer name="controlBar_dockedThumbnailsbtn_in"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_zoom_in.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction();viewControlZoomIn(false);"
           onup="viewControlZoomStop();
"
           tooltip="controlBar_dockedThumbnailszoomInTip"
           devices="desktop"
           visible="false"
           />
    <layer name="controlBar_dockedThumbnailsbtn_out_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" devices="desktop"/>
    <layer name="controlBar_dockedThumbnailsbtn_out"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_zoom_out.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction();viewControlZoomOut(false);
"
           onup="viewControlZoomStop();
"
           tooltip="controlBar_dockedThumbnailszoomOutTip"
           devices="desktop"
           visible="false"
           />

    <layer name="controlBar_dockedThumbnailsbtn_home_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_home"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_home.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           onclick="controlBar_dockedThumbnailsbtn_home_action();"
           visible="false"
           tooltip="controlBar_dockedThumbnailshomeTip"
           />
    <action name="controlBar_dockedThumbnailsbtn_home_action">
      hideTooltip();lookto(get(panoview.h),get(panoview.v),get(panoview.fov),smooth(100,20,50));
      if(scene[get(xml.scene)].video,
        plugin[get(videointerface_video)].seek(0);
        ifnot(plugin[get(videointerface_video)].ispaused,
          plugin[get(videointerface_video)].play();
        );
      );
    </action>

    <layer name="controlBar_dockedThumbnailsbtn_left_bg" style="controlBar_dockedThumbnails_btn_style_bg" devices="desktop" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_left"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_left.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction();viewControlMoveLeft(false);
"
           onup="viewControlMoveHoriStop();
"
            tooltip="controlBar_dockedThumbnailsmoveLeftTip"
           devices="desktop"
           visible="false"
           />
    <layer name="controlBar_dockedThumbnailsbtn_right_bg" style="controlBar_dockedThumbnails_btn_style_bg" devices="desktop" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_right"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_right.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction();viewControlMoveRight(false);
"
           onup="viewControlMoveHoriStop();
"
            tooltip="controlBar_dockedThumbnailsmoveRightTip"
           devices="desktop"
           visible="false"
           />

    <layer name="controlBar_dockedThumbnailsbtn_up_bg" style="controlBar_dockedThumbnails_btn_style_bg" devices="desktop" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_up"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_up.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction();viewControlMoveUp(false);
"
           onup="viewControlMoveVertStop();
"
            tooltip="controlBar_dockedThumbnailsmoveUpTip"
           devices="desktop"
           visible="false"
           />
    <layer name="controlBar_dockedThumbnailsbtn_down_bg" style="controlBar_dockedThumbnails_btn_style_bg" devices="desktop" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_down"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_down.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction();viewControlMoveDown(false);
"
           onup="viewControlMoveVertStop();
"
            tooltip="controlBar_dockedThumbnailsmoveDownTip"
           devices="desktop"
           visible="false"
           />





    <layer name="controlBar_dockedThumbnailsbtn_prev_pano_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_prev_pano"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_previous_scene.png"
           onclick="loadPreviousScene();
"
           style="controlBar_dockedThumbnails_btn_style"
           tooltip="controlBar_dockedThumbnailsprevSceneTip"
           visible="false"
           />
    <layer name="controlBar_dockedThumbnailsbtn_next_pano_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_next_pano"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_next_scene.png"
           onclick="loadNextScene();
"
           style="controlBar_dockedThumbnails_btn_style"
            tooltip="controlBar_dockedThumbnailsnextSceneTip"
           visible="false"
           />




    <layer name="controlBar_dockedThumbnailsbtn_share_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_share"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_share.png"
            onclick="shareTour();
"
            style="controlBar_dockedThumbnails_btn_style"
            visible="false"
            tooltip="controlBar_dockedThumbnailsshareTip"
            />


    <layer name="controlBar_dockedThumbnailsbtn_openfs_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" devices="fullscreensupport" />
    <layer name="controlBar_dockedThumbnailsbtn_openfs"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_enter_fs.png"
           onclick="enterFullscreen();
"
           style="controlBar_dockedThumbnails_btn_style"
           visible="false"
           tooltip="controlBar_dockedThumbnailsopenFsTip"
           devices="fullscreensupport"
           />
    <layer name="controlBar_dockedThumbnailsbtn_closefs_bg" style="controlBar_dockedThumbnails_btn_style_on_bg" visible="false" devices="fullscreensupport" />
    <layer name="controlBar_dockedThumbnailsbtn_closefs"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_close_fs.png"
           onclick="exitFullscreen();
"
           style="controlBar_dockedThumbnails_btn_style_on"
           visible="false"
           tooltip="controlBar_dockedThumbnailscloseFsTip"
           devices="fullscreensupport"
           />

    <layer name="controlBar_dockedThumbnailsbtn_autorotate_on_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_autorotate_on"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_start_autorotation.png"
           onclick="resumeautorotation();
"
           style="controlBar_dockedThumbnails_btn_style"
           visible="false"
            tooltip="controlBar_dockedThumbnailsautorotateOnTip"
           />
    <layer name="controlBar_dockedThumbnailsbtn_autorotate_off_bg" style="controlBar_dockedThumbnails_btn_style_on_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_autorotate_off"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_stop_autorotation.png"
           onclick="pauseautorotation();
"
           style="controlBar_dockedThumbnails_btn_style_on"
           visible="false"
           tooltip="controlBar_dockedThumbnailsautorotateOffTip"
           />


    <layer name="controlBar_dockedThumbnailsbtn_autotour_on_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_autotour_on"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_start_automatic_tour.png"
           onclick="startautotour();
"
           style="controlBar_dockedThumbnails_btn_style"
           visible="false"
            tooltip="controlBar_dockedThumbnailsautotourOnTip"
           />
    <layer name="controlBar_dockedThumbnailsbtn_autotour_off_bg" style="controlBar_dockedThumbnails_btn_style_on_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_autotour_off"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_stop_automatic_tour.png"
           onclick="stopautotour();
"
           style="controlBar_dockedThumbnails_btn_style_on"
           visible="false"
           tooltip="controlBar_dockedThumbnailsautotourOffTip"
           />




    <layer name="controlBar_dockedThumbnailsbtn_hidecontrols_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_hidecontrols"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_hide_controls.png"
           style="controlBar_dockedThumbnails_btn_style"
           onclick="controlBar_dockedThumbnailshideMenuControls();hideTourControls();
"
           visible="false"
            tooltip="controlBar_dockedThumbnailshideControlsTip"
           />

    <layer name="controlBar_dockedThumbnailsbtn_showcontrols"
                  crop="0| 0|48|48"
            onovercrop="0|48|48|48"
            ondowncrop="0|96|48|48"
            keep="true"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_show_controls_bg.png"
            align="bottomright"
            zorder="4"
            height="36"
            width="36"
            visible="false"
            y="12"
            x="0" >
    <layer name="controlBar_dockedThumbnailsbtn_showcontrols_fg"
                  crop="0| 0|48|48"
            onovercrop="0|48|48|48"
            ondowncrop="0|96|48|48"
            onclick="controlBar_dockedThumbnailsshowMenuControls();showTourControls();
"
            onhover="showTooltip('plugin',controlBar_dockedThumbnailsmenuTooltipStyle);"
            onout="hideTooltip();"
            tooltip="controlBar_dockedThumbnailsdisplayControlsTip"
            keep="true"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_show_controls.png"
            align="center"
            height="36"
            width="36"
            />
    </layer>


<action name="controlBar_dockedThumbnailshideMenuControls">
	set(controlBar_dockedThumbnailsIsOpened, false);
	set(layer[controlBar_dockedThumbnails_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_showcontrols].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_hidecontrols_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_hidecontrols].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_in_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_out_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_in].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_out].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_home_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_home].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_right_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_left_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_right].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_left].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_down_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_up_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_down].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_up].visible, false);
	if (scene.count GT 1,
	set(layer[controlBar_dockedThumbnailsbtn_prev_pano_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_next_pano_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_prev_pano].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_next_pano].visible, false);
	);
		controlBar_dockedThumbnailsupdateAutorotationButtons();

	set(layer[controlBar_dockedThumbnailsbtn_share_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_share].visible, false);
		controlBar_dockedThumbnailsupdateAutotourButtons();

		controlBar_dockedThumbnailsupdateFullscreenButtons();
</action>
<action name="controlBar_dockedThumbnailsshowMenuControls">
	set(controlBar_dockedThumbnailsIsOpened, true);
      controlBar_dockedThumbnailsupdateFullscreenButtons();
      controlBar_dockedThumbnailsupdateAutorotationButtons();

      controlBar_dockedThumbnailsupdateAutotourButtons();
	set(layer[controlBar_dockedThumbnailsbtn_share_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_share].visible, true);

      set(layer[controlBar_dockedThumbnails_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_showcontrols].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_hidecontrols_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_hidecontrols].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_in_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_out_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_in].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_out].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_home_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_home].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_right_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_left_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_right].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_left].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_down_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_up_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_down].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_up].visible, true);
	if (scene.count GT 1,
	set(layer[controlBar_dockedThumbnailsbtn_prev_pano_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_next_pano_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_prev_pano].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_next_pano].visible, true);
	);
	
	
		controlBar_dockedThumbnailsUpdateThumbnailsSize();
</action>



	<events name="controlBar_dockedThumbnailsmenufullscreenchangeevent"
		onenterfullscreen="controlBar_dockedThumbnailsupdateFullscreenButtons();"
		onexitfullscreen="controlBar_dockedThumbnailsupdateFullscreenButtons();"
		keep="true"/>
	<action name="controlBar_dockedThumbnailsHideFullscreenButtons">
		set(layer[controlBar_dockedThumbnailsbtn_openfs].visible , false);
		set(layer[controlBar_dockedThumbnailsbtn_closefs].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_openfs_bg].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_closefs_bg].visible, false);
	</action>
	<action name="controlBar_dockedThumbnailsShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[controlBar_dockedThumbnailsbtn_openfs].visible , false);
				set(layer[controlBar_dockedThumbnailsbtn_closefs].visible, true);
				set(layer[controlBar_dockedThumbnailsbtn_openfs_bg].visible, false);
				set(layer[controlBar_dockedThumbnailsbtn_closefs_bg].visible, true);
			,
				set(layer[controlBar_dockedThumbnailsbtn_openfs].visible ,true);
				set(layer[controlBar_dockedThumbnailsbtn_closefs].visible,false);
				set(layer[controlBar_dockedThumbnailsbtn_openfs_bg].visible, true);
				set(layer[controlBar_dockedThumbnailsbtn_closefs_bg].visible, false);
			);
		,
			controlBar_dockedThumbnailsHideFullscreenButtons();
		);
	</action>
	<action name="controlBar_dockedThumbnailsupdateFullscreenButtons">
		if (controlBar_dockedThumbnailsIsOpened,
			controlBar_dockedThumbnailsShowFullscreenButtons();
		,
			controlBar_dockedThumbnailsHideFullscreenButtons();
		);
	</action>

	<events name="controlBar_dockedThumbnailsAutorotationEvents"
		onstartautorotation="controlBar_dockedThumbnailsupdateAutorotationButtons();"
		onresumeautorotation="controlBar_dockedThumbnailsupdateAutorotationButtons();"
		onstopautorotation="controlBar_dockedThumbnailsupdateAutorotationButtons();"
		onpauseautorotation="controlBar_dockedThumbnailsupdateAutorotationButtons();"
		keep="true"/>
	<action name="controlBar_dockedThumbnailsHideAutorotationButtons">
		set(layer[controlBar_dockedThumbnailsbtn_autorotate_off].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_autorotate_on].visible , false);
		set(layer[controlBar_dockedThumbnailsbtn_autorotate_off_bg].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_autorotate_on_bg].visible , false);
	</action>
	<action name="controlBar_dockedThumbnailsShowAutorotationButtons">
		if(autorotate.enabled == false,
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_off].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_on].visible , true);
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_off_bg].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_on_bg].visible , true);
		,
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_off].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_on].visible , false);
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_off_bg].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_on_bg].visible , false);
		);
	</action>
	<action name="controlBar_dockedThumbnailsupdateAutorotationButtons">
		if (controlBar_dockedThumbnailsIsOpened,
			controlBar_dockedThumbnailsShowAutorotationButtons();
		,
			controlBar_dockedThumbnailsHideAutorotationButtons();
		);
	</action>


	<events name="controlBar_dockedThumbnailsAutotourEvents"
		onstartautotour="controlBar_dockedThumbnailsupdateAutotourButtons();"
		onstopautotour="controlBar_dockedThumbnailsupdateAutotourButtons();"
		keep="true"/>
	<action name="controlBar_dockedThumbnailsHideAutotourButtons">
		set(layer[controlBar_dockedThumbnailsbtn_autotour_off].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_autotour_on].visible , false);
		set(layer[controlBar_dockedThumbnailsbtn_autotour_off_bg].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_autotour_on_bg].visible, false);
	</action>
	<action name="controlBar_dockedThumbnailsShowAutotourButtons">
		if (tour_autotourenabled == false,
			set(layer[controlBar_dockedThumbnailsbtn_autotour_off].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_autotour_on].visible , true);
			set(layer[controlBar_dockedThumbnailsbtn_autotour_off_bg].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_autotour_on_bg].visible, true);
		,
			set(layer[controlBar_dockedThumbnailsbtn_autotour_off].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_autotour_on].visible , false);
			set(layer[controlBar_dockedThumbnailsbtn_autotour_off_bg].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_autotour_on_bg].visible, false);
		);
	</action>
	<action name="controlBar_dockedThumbnailsupdateAutotourButtons">
		if (controlBar_dockedThumbnailsIsOpened,
			controlBar_dockedThumbnailsShowAutotourButtons();
		,
			controlBar_dockedThumbnailsHideAutotourButtons();
		);
	</action>


	<layer name="controlBar_dockedThumbnailsmenuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	type="text"
	align="center"
	bg="true"
	bgcolor="0x000000"
	bgalpha="1"
	bgborder="0"
	css="color:#f29320;font-family:Times New Roman;font-weight:bold;font-size:14px;text-align:left;"
	edge="bottom"
	interactivecontent="false"
	zorder="0"
	padding="2"
	xoffset="0"
	yoffset="0"
	visible="false"
	html=""
	/>



<!-- ********** -->
<!-- Social Share -->
<!-- id : socialShare -->
<!-- ********** -->

<ptplugin name="socialShare" engine="kolorBox">
	<settings>
		<option name="position" value="topleft" type="string" />
		<option name="margin_x" value="50" type="int" />
		<option name="margin_y" value="50" type="int" />
		<option name="external_padding" value="15" type="int" />
		<option name="animate" value="false" type="bool" />
		<option name="draggable_box" value="false" type="bool" />
		<option name="container_auto_size" value="true" type="bool" />
		<option name="container_color" value="ffffff" type="string" />
		<option name="container_alpha" value="0.80000000000000004" type="float" />
		<option name="container_topleft_border_radius" value="15" type="int" />
		<option name="container_topright_border_radius" value="15" type="int" />
		<option name="container_bottomleft_border_radius" value="15" type="int" />
		<option name="container_bottomright_border_radius" value="15" type="int" />
		<option name="container_border_width" value="0" type="int" />
		<option name="container_border_color" value="ffffff" type="string" />
		<option name="container_border_alpha" value="1" type="float" />
		<option name="overlay_displayed" value="false" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.50000762951094835" type="float" />

		<option name="social_btn" value="facebook#twitter#google#linkedin#email" type="string" />
		<option name="social_orientation" value="horizontal" type="string" />
		<option name="social_btn_size" value="64" type="int" />
		<option name="inner_margin" value="10" type="int" />
		
		
		<option name="title_displayed" value="false" type="bool" />
		<option name="caption_displayed" value="false" type="bool" />
		<option name="close_displayed" value="true" type="bool" />
		<option name="close_position" value="topright" type="string" />
		<option name="close_text" value="socialShareclose_text" type="string" />

		<option name="close_callback" value="invokeKrFunction('closeKolorBoxCallback_socialShare')" type="string" />
		<option name="zorder" value="5" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
	<internaldata>
		
	</internaldata>
</ptplugin>

<action name="kolorBoxJsReady_socialShare">
	set(ptplugin[socialShare].jsready, true);

</action>



<action name="showSocialShare_socialShare">
	ifnot(ptplugin[socialShare].isOpen,
		set(ptplugin[socialShare].isOpen, true);
		pauseautorotation(forceplugin);

			js(invokePluginFunction(socialShare, loadSingleArrayItem, social));
		events.dispatch(onremovedisplayedobject);
	);
</action>

<action name="toggleSocialShare_socialShare">
	js(invokePluginFunction(socialShare, toggleKolorBox, %1));
</action>


<action name="closeKolorBox_socialShare">
	js(invokePluginFunction(socialShare, closeKolorBox));
</action>

<action name="closeKolorBoxCallback_socialShare">
	resumeautorotation(forceplugin);

	
	set(ptplugin[socialShare].isOpen, false);
</action>

<action name="changeLanguage_socialShare">
	if(ptplugin[socialShare].jsready,
		js(invokePluginFunction(socialShare, changeLanguage));
	);
</action>

<events name="kolorBoxEvents_socialShare" 
	keep="true"
	onsharetour="showSocialShare_socialShare();" 
	
	
	changetourlanguage="changeLanguage_socialShare();"
	/>

<!-- ********** -->
<!-- Logo -->
<!-- id : logo -->
<!-- ********** -->

  <layer align="topleft"
         x="10"
         y="10"
         zorder="6"
         name="logo"
         keep="true"
         visible="false"
         capture="false"

         url="%FIRSTXML%/graphics/logo/logo.png" 
         handcursor="false"


         />

  <events name="logoevents" 
    onTourStart="showlogo();"
    keep="true" />

  <action name="hidelogo">
    set(layer[logo].visible, false);
  </action>
  <action name="showlogo">
      set(layer[logo].visible, true);
  </action>




<action name="setViewStereographic">
	set(sceneisfull360, false);
	if(scene[get(xml.scene)].full360,
		sub(viewhfov, panoview.hmax, panoview.hmin);
		if (viewhfov == 360,
			sub(viewvfov, panoview.vmax, panoview.vmin);
			if (viewvfov == 180,
				set(sceneisfull360, true);
			);
		);
	);
	if (sceneisfull360 AND (device.webgl OR device.flash),
		if(normalViewActivated,stopSetViewTweens(););
		if(current_view_isflat === true,
			setViewNonFlat(VFOV);
		);
		setViewStereographicComplete();
	);
</action>

<action name="setViewStereographicComplete">
	set(backtonormalfirst,false);
	if(view.pannini GE 1.0, set(backtonormalfirst,true));
	if(view.stereographic == false, set(backtonormalfirst,true));
	if(backtonormalfirst, hideTooltip();tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeOutQuad, WAIT); );
	tween(view.architectural, 0.0, 0.25);
	set(view.fovmax, get(panoview.fovmax));
	set(view.fisheyefovlink, 1.5);
	tween(view.pannini, 0.0, distance(1.0, 0.75), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	set(view.stereographic, true);
	tween(view.fisheye, 1.0, distance(1.0, 0.75));
	tween(view.vlookat, get(panoview.v), 1.25);
	tween(view.fov, get(panoview.fov), distance(50, 0.45));
</action>

<action name="setViewPannini">
	set(sceneisfull360, false);
	if(scene[get(xml.scene)].full360,
		sub(viewhfov, panoview.hmax, panoview.hmin);
		if (viewhfov == 360,
			sub(viewvfov, panoview.vmax, panoview.vmin);
			if (viewvfov == 180,
				set(sceneisfull360, true);
			);
		);
	);
	if (sceneisfull360 AND (device.webgl OR device.flash),
		if(normalViewActivated,stopSetViewTweens(););
		if(current_view_isflat === true,
			setViewNonFlat(VFOV);
		);
		setViewPanniniComplete();
	);
</action>

<action name="setViewPanniniComplete">
	set(backtonormalfirst,false);
	if(view.pannini LT 1.0, set(backtonormalfirst,true); );
	if(view.stereographic == false, set(backtonormalfirst,true); );
	if(backtonormalfirst, hideTooltip();tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeOutQuad, WAIT); );
	set(view.fisheyefovlink, 1.5);
	set(view.stereographic, true);
	set(view.fovmax, get(panoview.fovmax));
	tween(view.vlookat, get(panoview.v), 1.25);
	tween(view.pannini, 1.0, distance(1.0, 0.75), easeOutQuad, limitViewForPannini());
	tween(view.architectural, 0.0, 0.25);
	tween(view.fisheye, 1.0, distance(1.0, 0.75));
	tween(view.fov, get(panoview.fov), distance(50, 0.45));
</action>

<action name="limitViewForPannini">
	if(view.fov GT 130,
		tween(view.fov, 130.00, 0.45, easeOutQuad, set(view.fovmax, 130);set(view.limitview, "range"););
	,
		set(view.fovmax, 130);
		set(view.limitview, "range");
	);
</action>

<krpano panniniViewActivated="true" />
<action name="restoreViewFromPannini">
	if(scene[get(xml.scene)].planar,
		set(view.limitview, fullrange);
	,
		set(view.limitview, range);
		set(view.hlookatmin, get(panoview.hmin));
		set(view.hlookatmax, get(panoview.hmax));
		set(view.vlookatmin, get(panoview.vmin));
		set(view.vlookatmax, get(panoview.vmax));
	);
</action>

<action name="applyLimitsForPannini">
	if(view.pannini == 1.0,
		div(halffov, get(view.fov), 2);
		Math.ceil(halffov);
		roundval(halffov);
		set(view.vlookatmax, get(halffov));
		inc(halffov);
		txtadd(halffov,'-',get(halffov));
		set(view.vlookatmin, get(halffov));
	);
</action>

<events name="viewPanniniEvents" onviewchanged="if(view.pannini == 1.0,applyLimitsForPannini(););" devices="webgl.or.flash" keep="true" />

<action name="setViewLittlePlanet">
	set(sceneisfull360, false);
	if(scene[get(xml.scene)].full360,
		sub(viewhfov, panoview.hmax, panoview.hmin);
		if (viewhfov == 360,
			sub(viewvfov, panoview.vmax, panoview.vmin);
			if (viewvfov == 180,
				set(sceneisfull360, true);
			);
		);
	);
	if (sceneisfull360 AND (device.webgl OR device.flash),
		if(normalViewActivated,stopSetViewTweens(););
		if(current_view_isflat === true,
			setViewNonFlat(VFOV);
		);
		setViewLittlePlanetComplete();
	);
</action>

<action name="setViewLittlePlanetComplete">
	set(backtonormalfirst,false);
	if(view.pannini GE 1.0, set(backtonormalfirst,true));
	if(view.stereographic == false, set(backtonormalfirst,true));
	if(backtonormalfirst, hideTooltip();tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeOutQuad, WAIT); );
	set(view.stereographic, true);
	set(view.fisheyefovlink, 1.5);
	tween(view.architectural, 0.0, 0.25);
	tween(view.vlookat, 90, distance(179, 1.50));
	tween(view.pannini, 0.0, distance(1.0, 0.75), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	if(panoview.fovmax LE 150, set(view.fovmax, 150); , set(view.fovmax, get(panoview.fovmax)); );
	tween(view.fisheye, 1.0, distance(1.0, 0.75));
	tween(view.fov, 150, distance(179, 0.75));
</action>

<action name="setViewArchitectural">
	if(normalViewActivated,stopSetViewTweens(););
	if(current_view_isflat === true,
		setViewNonFlat(VFOV);
	);
	setViewArchitecturalComplete();
</action>

<action name="setViewArchitecturalComplete">
	set(view.fovmax, get(panoview.fovmax));
	set(view.fisheyefovlink, 0.5);
	tween(view.architectural, 1.0, distance(1.0, 0.45));
	tween(view.pannini, 0.0, distance(1.0, 0.45), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	tween(view.fisheye, 0.0, distance(1.0, 0.45), easeOutQuad, 
		set(view.stereographic,false);
		tween(view.vlookat, get(panoview.v), distance(90, 0.45));
	);
	tween(view.fov, get(panoview.fov), distance(50, 0.45));
</action>

  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>


<action name="setViewFisheye">
	set(sceneisfull360, false);
	if(scene[get(xml.scene)].full360,
		sub(viewhfov, panoview.hmax, panoview.hmin);
		if (viewhfov == 360,
			sub(viewvfov, panoview.vmax, panoview.vmin);
			if (viewvfov == 180,
				set(sceneisfull360, true);
			);
		);
	);
	if (sceneisfull360 AND (device.webgl OR device.flash),
		if(normalViewActivated,stopSetViewTweens(););
		if(current_view_isflat === true,
			setViewNonFlat(VFOV);
		);
		setViewFisheyeComplete();
	);
</action>

<action name="setViewFisheyeComplete">
	set(view.fisheyefovlink, 1.5);
	set(view.fovmax, get(panoview.fovmax));
	tween(view.architectural, 0.0, distance(1.0, 0.30));
	tween(view.fisheye, 0.0, distance(1.0, 0.30), easeOutQuad,
		set(view.stereographic,false);
		tween(view.fisheye, 0.45, distance(1.0, 0.75));
		tween(view.vlookat, get(panoview.v), distance(90, 0.45));
	);
	tween(view.pannini, 0.0, distance(1.0, 0.75), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	tween(view.fov, get(panoview.fov), distance(50, 0.45));
</action>

<action name="viewControlZoomIn">
	if(%1,
		if(%2,
			if(%2 LT view.fovmin,
				zoomto(get(view.fovmin));
			,
				if(%2 LT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, -1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, -1);
	);
</action>
<action name="viewControlZoomOut">
	if(%1,
		if(%2,
			if(%2 GT view.fovmax,
				zoomto(get(view.fovmax));
			,
				if(%2 GT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, +1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, +1);
	);
</action>
<action name="viewControlZoomStop">
	set(fov_moveforce, 0);
</action>

  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);js(setFullscreen(false));</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);js(setFullscreen(true));</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>
  <action name="enterFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,true);events.dispatch(onenterfullscreen);</action>
  <action name="exitFullScreenFallback">set(fullscreen,false);</action>
  <action name="enterFullScreenFallback">set(fullscreen,true);</action>
  
  <action name="resizeFullScreenEvent">delayedcall(0,updatescreen(););</action>

  <!-- Share Tour -->
  <action name="shareTour">events.dispatch(onsharetour);</action>

<action name="viewControlMoveUp">
	if(%1,
		if(%2,
			set(isfullvertical, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewvfov, panoview.vmax, panoview.vmin);
				if (viewvfov == 180,
					set(isfullvertical, true);
				);
			);
			if(isfullvertical == false AND calc(view.vlookat-%2) LT view.vlookatmin,
				moveto(get(view.hlookat), get(view.vlookatmin));
			,
				moveto(get(view.hlookat), calc(view.vlookat-%2));
			);
		,
			set(vlookat_moveforce, -1);
			delayedcall(0.1, viewControlMoveVertStop());
		);
	,
		set(vlookat_moveforce, -1);
	);
</action>
<action name="viewControlMoveDown">
	if(%1,
		if(%2,
			set(isfullvertical, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewvfov, panoview.vmax, panoview.vmin);
				if (viewvfov == 180,
					set(isfullvertical, true);
				);
			);
			if(sceneisfull360 == false AND calc(view.vlookat+%2) GT view.vlookatmax,
				moveto(get(view.hlookat), get(view.vlookatmax));
			,
				moveto(get(view.hlookat), calc(view.vlookat+%2));
			);
		,
			set(vlookat_moveforce, +1);
			delayedcall(0.1, viewControlMoveVertStop());
		);
	,
		set(vlookat_moveforce, +1);
	);
</action>
<action name="viewControlMoveLeft">
	if(%1,
		if(%2,
			set(isfullhorizontal, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewhfov, panoview.hmax, panoview.hmin);
				if (viewhfov == 360,
					set(isfullhorizontal, true);
				);
			);
			if(isfullhorizontal == false AND calc(view.hlookat-%2) LT view.hlookatmin,
				moveto(get(view.hlookatmin), get(view.vlookat));
			,
				moveto(calc(view.hlookat-%2), get(view.vlookat));
			);
		,
			set(hlookat_moveforce, -1);
			delayedcall(0.1, viewControlMoveHoriStop());
		);
	,
		set(hlookat_moveforce, -1);
	);
</action>
<action name="viewControlMoveRight">
	if(%1,
		if(%2,
			set(isfullhorizontal, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewhfov, panoview.hmax, panoview.hmin);
				if (viewhfov == 360,
					set(isfullhorizontal, true);
				);
			);
			if(isfullhorizontal == false AND calc(view.hlookat+%2) GT view.hlookatmax,
				moveto(get(view.hlookatmax), get(view.vlookat));
			,
				moveto(calc(view.hlookat+%2), get(view.vlookat));
			);
		,
			set(hlookat_moveforce, +1);
			delayedcall(0.1, viewControlMoveHoriStop());
			
		);
	,
		set(hlookat_moveforce, +1);
	);
</action>
<action name="viewControlMoveHoriStop">
	set(hlookat_moveforce, 0);
</action>
<action name="viewControlMoveVertStop">
	set(vlookat_moveforce, 0);
</action>

<action name="setViewNormal">
	stopSetViewTweens();
	if(current_view_isflat === true,
		setViewNonFlat(VFOV);
	);
	setViewNormalComplete();
</action>

<action name="setViewNormalComplete">
	set(view.fisheyefovlink, 0.5);
	set(view.fovmax, get(panoview.fovmax));
	tween(view.architectural, 0.0, distance(1.0, 0.45));
	tween(view.pannini, 0.0, distance(1.0, 0.45), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	tween(view.vlookat, get(panoview.v), distance(90, 0.45));
	tween(view.fov, get(panoview.fov), distance(50, 0.45));
	tween(view.fisheye, 0.0, distance(1.0, 0.45),
		set(view.stereographic,false);
	);
</action>

<krpano normalViewActivated="true" />
<action name="stopSetViewTweens">
	stoptween(view.fov);
	stoptween(view.vlookat);
	stoptween(view.fisheye);
	stoptween(view.architectural);
	stoptween(view.pannini);
</action>

<action name="setViewFisheyeBall">
	set(sceneisfull360, false);
	if(scene[get(xml.scene)].full360,
		sub(viewhfov, panoview.hmax, panoview.hmin);
		if (viewhfov == 360,
			sub(viewvfov, panoview.vmax, panoview.vmin);
			if (viewvfov == 180,
				set(sceneisfull360, true);
			);
		);
	);
	if (sceneisfull360 AND (device.webgl OR device.flash),
		if(normalViewActivated,stopSetViewTweens(););
		if(current_view_isflat === true,
			setViewNonFlat(VFOV);
		);
		setViewFisheyeBallComplete();
	);
</action>

<action name="setViewFisheyeBallComplete">
	set(view.fisheyefovlink, 1.5);
	tween(view.architectural, 0.0, distance(1.0, 0.30));
	tween(view.pannini, 0.0, distance(1.0, 0.45), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	if(panoview.fovmax LE 179, set(view.fovmax, 179);, set(view.fovmax, get(panoview.fovmax)); );
	tween(view.vlookat, get(panoview.v), distance(90, 0.45));
	tween(view.fisheye, 1.0, distance(1.0, 0.45), easeOutQuad,
		set(view.stereographic,false);
		tween(view.fov, 179, 4.0);
	);
</action>

</krpano>